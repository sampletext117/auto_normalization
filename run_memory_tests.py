#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–∞–º—è—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
"""

import sys
from typing import List
from models import Relation, Attribute, FunctionalDependency
from memory_test import run_memory_test, plot_memory_usage


def create_example_relations() -> List[tuple]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    examples = []
    
    # –ü—Ä–∏–º–µ—Ä 1: –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏-–ü—Ä–æ–µ–∫—Ç—ã (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä)
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ 1: –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏-–ü—Ä–æ–µ–∫—Ç—ã")
    attrs1 = [
        Attribute('–ö–æ–¥–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 'INTEGER', True),
        Attribute('–ò–º—è–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 'VARCHAR', False),
        Attribute('–û—Ç–¥–µ–ª', 'VARCHAR', False),
        Attribute('–ù–∞—á–∞–ª—å–Ω–∏–∫–û—Ç–¥–µ–ª–∞', 'VARCHAR', False),
        Attribute('–ö–æ–¥–ü—Ä–æ–µ–∫—Ç–∞', 'INTEGER', True),
        Attribute('–ù–∞–∑–≤–∞–Ω–∏–µ–ü—Ä–æ–µ–∫—Ç–∞', 'VARCHAR', False),
        Attribute('–ë—é–¥–∂–µ—Ç', 'DECIMAL', False)
    ]
    
    fds1 = [
        FunctionalDependency({attrs1[0]}, {attrs1[1], attrs1[2]}),  # –ö–æ–¥–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Üí –ò–º—è–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –û—Ç–¥–µ–ª
        FunctionalDependency({attrs1[2]}, {attrs1[3]}),            # –û—Ç–¥–µ–ª ‚Üí –ù–∞—á–∞–ª—å–Ω–∏–∫–û—Ç–¥–µ–ª–∞
        FunctionalDependency({attrs1[4]}, {attrs1[5], attrs1[6]})  # –ö–æ–¥–ü—Ä–æ–µ–∫—Ç–∞ ‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ–ü—Ä–æ–µ–∫—Ç–∞, –ë—é–¥–∂–µ—Ç
    ]
    
    relation1 = Relation('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏–ü—Ä–æ–µ–∫—Ç—ã', attrs1, fds1)
    examples.append(('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏-–ü—Ä–æ–µ–∫—Ç—ã', relation1, 1000))
    
    # –ü—Ä–∏–º–µ—Ä 2: –°—Ç—É–¥–µ–Ω—Ç—ã-–ö—É—Ä—Å—ã
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ 2: –°—Ç—É–¥–µ–Ω—Ç—ã-–ö—É—Ä—Å—ã")
    attrs2 = [
        Attribute('–°—Ç—É–¥–µ–Ω—ÇID', 'INTEGER', True),
        Attribute('–ò–º—è–°—Ç—É–¥–µ–Ω—Ç–∞', 'VARCHAR', False),
        Attribute('–ì—Ä—É–ø–ø–∞', 'VARCHAR', False),
        Attribute('–ö—É—Ä–∞—Ç–æ—Ä', 'VARCHAR', False),
        Attribute('–ö—É—Ä—ÅID', 'INTEGER', True),
        Attribute('–ù–∞–∑–≤–∞–Ω–∏–µ–ö—É—Ä—Å–∞', 'VARCHAR', False),
        Attribute('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'VARCHAR', False),
        Attribute('–û—Ü–µ–Ω–∫–∞', 'INTEGER', False)
    ]
    
    fds2 = [
        FunctionalDependency({attrs2[0]}, {attrs2[1], attrs2[2]}),  # –°—Ç—É–¥–µ–Ω—ÇID ‚Üí –ò–º—è–°—Ç—É–¥–µ–Ω—Ç–∞, –ì—Ä—É–ø–ø–∞
        FunctionalDependency({attrs2[2]}, {attrs2[3]}),            # –ì—Ä—É–ø–ø–∞ ‚Üí –ö—É—Ä–∞—Ç–æ—Ä
        FunctionalDependency({attrs2[4]}, {attrs2[5], attrs2[6]})  # –ö—É—Ä—ÅID ‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ–ö—É—Ä—Å–∞, –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    ]
    
    relation2 = Relation('–°—Ç—É–¥–µ–Ω—Ç—ã–ö—É—Ä—Å—ã', attrs2, fds2)
    examples.append(('–°—Ç—É–¥–µ–Ω—Ç—ã-–ö—É—Ä—Å—ã', relation2, 1500))
    
    # –ü—Ä–∏–º–µ—Ä 3: –ó–∞–∫–∞–∑—ã-–¢–æ–≤–∞—Ä—ã (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π)
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ 3: –ó–∞–∫–∞–∑—ã-–¢–æ–≤–∞—Ä—ã")
    attrs3 = [
        Attribute('–ó–∞–∫–∞–∑ID', 'INTEGER', True),
        Attribute('–ö–ª–∏–µ–Ω—ÇID', 'INTEGER', False),
        Attribute('–ò–º—è–ö–ª–∏–µ–Ω—Ç–∞', 'VARCHAR', False),
        Attribute('–ì–æ—Ä–æ–¥–ö–ª–∏–µ–Ω—Ç–∞', 'VARCHAR', False),
        Attribute('–¢–æ–≤–∞—ÄID', 'INTEGER', True),
        Attribute('–ù–∞–∑–≤–∞–Ω–∏–µ–¢–æ–≤–∞—Ä–∞', 'VARCHAR', False),
        Attribute('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'VARCHAR', False),
        Attribute('–¶–µ–Ω–∞', 'DECIMAL', False),
        Attribute('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'INTEGER', False),
        Attribute('–î–∞—Ç–∞–ó–∞–∫–∞–∑–∞', 'DATE', False)
    ]
    
    fds3 = [
        FunctionalDependency({attrs3[1]}, {attrs3[2], attrs3[3]}),  # –ö–ª–∏–µ–Ω—ÇID ‚Üí –ò–º—è–ö–ª–∏–µ–Ω—Ç–∞, –ì–æ—Ä–æ–¥–ö–ª–∏–µ–Ω—Ç–∞
        FunctionalDependency({attrs3[4]}, {attrs3[5], attrs3[6], attrs3[7]})  # –¢–æ–≤–∞—ÄID ‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ–¢–æ–≤–∞—Ä–∞, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –¶–µ–Ω–∞
    ]
    
    relation3 = Relation('–ó–∞–∫–∞–∑—ã–¢–æ–≤–∞—Ä—ã', attrs3, fds3)
    examples.append(('–ó–∞–∫–∞–∑—ã-–¢–æ–≤–∞—Ä—ã', relation3, 2000))
    
    return examples


def run_single_test(name: str, relation: Relation, num_rows: int):
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print(f"\n{'='*80}")
    print(f"üß™ –¢–ï–°–¢: {name}")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {num_rows:,}")
    print(f"üìã –ê—Ç—Ä–∏–±—É—Ç—ã: {', '.join([attr.name for attr in relation.attributes])}")
    print(f"üîó –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    for fd in relation.functional_dependencies:
        det_str = ', '.join([attr.name for attr in fd.determinant])
        dep_str = ', '.join([attr.name for attr in fd.dependent])
        print(f"   {det_str} ‚Üí {dep_str}")
    print(f"{'='*80}")
    
    try:
        results = run_memory_test(relation, num_rows)
        
        if results:
            print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê '{name}':")
            print(f"{'–£—Ä–æ–≤–µ–Ω—å':<15} {'–†–∞–∑–º–µ—Ä (–ö–ë)':<12} {'–°—Ç—Ä–æ–∫':<10} {'–¢–∞–±–ª–∏—Ü':<8} {'–ò–∑–º–µ–Ω–µ–Ω–∏–µ':<12}")
            print("-" * 70)
            
            original_size = results.get('Original', {}).get('total_size', 0) / 1024
            
            for level in ['Original', '2NF', '3NF', 'BCNF', '4NF']:
                if level in results:
                    data = results[level]
                    size_kb = data['total_size'] / 1024
                    rows = data['row_count']
                    tables = data['table_count']
                    
                    if level == 'Original':
                        change = "‚Äî"
                    else:
                        change_pct = ((size_kb - original_size) / original_size * 100) if original_size > 0 else 0
                        change = f"{change_pct:+.1f}%"
                    
                    print(f"{level:<15} {size_kb:<12.2f} {rows:<10,} {tables:<8} {change:<12}")
            
            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
            print(f"\nüìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è '{name}'...")
            plot_memory_usage(results)
            
        else:
            print(f"‚ùå –¢–µ—Å—Ç '{name}' –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ '{name}': {e}")
        import traceback
        traceback.print_exc()


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ü–ê–ú–Ø–¢–ò")
    print("=" * 80)
    
    examples = create_example_relations()
    
    for i, (name, relation, num_rows) in enumerate(examples, 1):
        print(f"\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ {i}/{len(examples)}")
        run_single_test(name, relation, num_rows)
        
        if i < len(examples):
            input(f"\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É...")
    
    print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
    print("=" * 80)


def run_interactive_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
    examples = create_example_relations()
    
    while True:
        print(f"\nüìã –î–û–°–¢–£–ü–ù–´–ï –¢–ï–°–¢–´:")
        print("0. –í—ã–π—Ç–∏")
        for i, (name, _, num_rows) in enumerate(examples, 1):
            print(f"{i}. {name} ({num_rows:,} —Å—Ç—Ä–æ–∫)")
        print(f"{len(examples) + 1}. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
        
        try:
            choice = int(input(f"\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç (0-{len(examples) + 1}): "))
            
            if choice == 0:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == len(examples) + 1:
                run_all_tests()
            elif 1 <= choice <= len(examples):
                name, relation, num_rows = examples[choice - 1]
                run_single_test(name, relation, num_rows)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî¨ –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–ê–ú–Ø–¢–ò –ü–†–ò –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –ë–î")
    print("=" * 80)
    
    if len(sys.argv) > 1:
        if sys.argv[1] == '--all':
            run_all_tests()
        elif sys.argv[1] == '--help':
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python run_memory_tests.py           # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
            print("  python run_memory_tests.py --all     # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
            print("  python run_memory_tests.py --help    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {sys.argv[1]}")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    else:
        run_interactive_test()


if __name__ == "__main__":
    main() 